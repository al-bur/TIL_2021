# [210621] CS - JWT(Json Web Token)

웹 사이트를 이용할 때, 필수적으로 존재하는 부분이 로그인 부분입니다. 많은 사이트들이 로그인을 해야만 서비스를 이용할 수 있는 방식으로 운영하고 있고, 이 때문에 많은 웹 개발자들이 사이트 상에서 인증 방식에 대해 꾸준히 고민을 하고 개선을 하고 있습니다. 기존에는 `세션`을 사용하여 사용자의 로그인 상태를 유지하는 방식을 많이 사용하였는데, 최근에는 토큰 기반 인증 방식도 많이 사용되고 있습니다.



**오늘은 토큰 기반 인증의 대명사인, JWT(Json Web Token)에 대해서 정리해 보았습니다**



### 1. JWT란?

---

JWT는 토큰 기반 인증 방식으로, 사용자의 세션 상태를 저장하는 것이 아니라 필요한 정보를 토큰 body에 저장해 사용자가 가지고 있고 그것을 `증명서`처럼 사용하는 방식입니다.



**그렇다면, 왜 토큰 기반 인증이 나타나게 된 것일까?**

모든 것에는 인과관계가 있듯이, 토큰 인증 방식이 나타나게 된 것도 `세션`을 활용한 인증 방식의 문제점들을 개선하기 위해 나타났다고 보면 됩니다. 

- 사용자가 인증을 하면, 각 사용자의 기록이 서버에 저장이 됩니다(`세션`). 수 많은 `세션`들을 데이터 베이스나 메모리에 저장하는데, 이는 사용자가 많으면 많을 수록 성능에 무리를 줄 수 있습니다.
- 서버에 많은 과부하를 줄 수 있는 `세션` 방식 인증 수단은 서버의 확장성에 악영향을 줍니다.

위의 문제점들외에도 다른 문제점들이 있을 것입니다.



 **서버를 이용한 인증 방식을 개선할 수 있는 것이 토큰 인증 방식입니다**

토큰 인증 방식은 `stateless`입니다. 즉, 상태유지를 하지 않는 다는 것이고, 이는 더이상 서버에 사용자의 `인증 정보`를 저장하지 않는 다는 것입니다. 서버가 주요 역할을 하던 기존의 인증방식의 문제점들을 해결해 줄 수 있는 것입니다.



### 2.  토큰 인증 방식의 작동 원리

---

기본 적인 작동원리입니다.

1. `사용자`가 아이디와 비밀번호로 `로그인`을 합니다.
2. `서버`측에서 해당 정보를 `검증`합니다.
3. `검증`을 통과하면, 서버측에서 사용자에게 `signed 토큰`을 발급해줍니다.
4. `Client`측에서 해당 `토큰`을 저장해두고, 서버에 요청을 보낼때마다, `토큰`도 같이 보내줍니다.
5. 서버는 `토큰`을 검증하고, 응답해줍니다.



### 3. JWT 특징

---

그렇다면, 이제 `토큰 인증 방식`의 대표 주자인 `JWT`에 대해 자세히 알아보도록 하겠습니다.

> - 수많은 프로그래밍 언어에서 지원됩니다.
>
> - 자가 수용적입니다. - 정보를 자체적으로 지니고 있습니다.
> - 쉽게 전달 될 수 있습니다. - 자가 수용적이므로, 두 개체 사이에서 쉽게 전달될 수 있습니다. 웹서버의 경우 HTTP의 헤더에 넣어서 전달 가능합니다.



### 4. Vue.js를 활용한 JWT 구현

---

1. 회원가입 Form을 통해 유저의 정보를 입력 받는다.
2. Formdata를 서버에 전송하고, 서버에서 JWT 토큰을 발급받는다. (Access Token, Refresh Token)
   - Access Token의 만료 기한은 짧고, Refresh Token의 유효 기간은 길다.
   - 발급받은 Token들은 유저의 localstorage에 저장을 한다.
3. (로그인을 하거나 / 회원가입에 성공한 상태 가정) 서버에 요청을 보낼 때마다 `Access Token`을 `headers`에 담아서 보내준다.
4. 서버는 이를 확인하고, 응답을 준다.
   - 응답을 주기 전에 `Access Token`의 만료 여부를 확인
   - 만료 되었으면, `Refresh Token`을 요청
   - client에서 다시 `Access Token` 과 `Refresh Token`을 서버에 전송
   - `Refresh Token` 확인 후 새로 `Access Token` 발급



